<!DOCTYPE html>
<html>

<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>EFFECTIVATS-GraphSearch-npm</title>
##patsyntax()
##thePage_style()
</head>

<body>

<h1>
Effective ATS:<br>
Let's start with package-based programming!
</h1>

##para('\

In this article, I present an example that makes use of a package
for (generic) graph search. It should be plainly evident that this
style of package-based programming can greatly facilitate sharing of
ATS code, which is essential to building a community based on the ATS
programming language system.

')##comment("para")

<h2>Generic Graph Search</h2>

##para('\

A template-based implementation of generic graph search
plus detailed explanation can be found
<a href="http://ats-lang.sourceforge.net/EXAMPLE/EFFECTIVATS/GraphSearch/index.html">on-line</a>
in an article in the Effective-ATS series, which serves as the basis for
the code used in this article and should therefore be thoroughly studied
first.

')##comment("para")

<h2>Solving 8-Queen Puzzle</h2>

##para('\

The famous 8-queen puzzle asks the player to find ways to put eight
queen pieces on a chess board such that no queen piece can attack
any other ones. In other words, no two queen pieces can be put on the
same row, the same column, or the same diagnal. This puzzle can be
readily solved with a tree-based search, which is a special case of
graph search.

')

##para('\

There is a package of the name
<u>atscntrb-bucs320-graphsearch</u> for generic graph search that is
stored
<a href="https://www.npmjs.com/package/atscntrb-bucs320-graphsearch">on-line</a>, and
the content of the package is available for viewing
<a href="https://github.com/githwxi/ATS-Postiats/tree/master/libats/BUCS320/GraphSearch">here</a>.
One can simply use the <u>npm</u> tool (for node package management)
to install the package directly by issuing the following command-line:

<p>
<tt>npm install atscntrb-bucs320-graphsearch</tt>
</p>

Or one can compose a file of the name ##filename("package.json") to
direct <u>npm</u> regarding package installation.

')

##para('\

The following lines in ##filename("QueenPuzzle.dats") are for
statically loading some files in <u>atscntrb-bucs320-graphsearch</u>:

<pre
class="patsyntax"
>##dats2xhtml('\
//
#define GRAPHSEARCH_DFS 1 // for depth-first search
//
#include "$PATSHOMELOCS/atscntrb-bucs320-graphsearch/mylibies.hats"
//
')</pre>

The <u>#include</u> directive indicates to <u>patsopt</u>, the ATS
compiler, that the file following it should be <em>included</em>.
Note that the variable <u>PATSHOMELOCS</u> in this case should be set
to the name of the directory ##filename("./node_modules")
as <u>npm</u> installs packages in it. The name ##filename("mylibies.hats")
is conventional in the sense that it refers to a file that should be
only used to statically load files into certain namespaces. The content of
this file is listed as follows:

<pre
class="patsyntax"
>##dats2xhtml('\
//
staload GS = "./DATS/GraphSearch.dats"
//
(* ****** ****** *)
//
#ifdef
GRAPHSEARCH_BFS
staload GS_bfs = "./DATS/GraphSearch_bfs.dats"
#endif // #ifdef(GraphSearch_bfs)
//
(* ****** ****** *)
//
#ifdef
GRAPHSEARCH_DFS
staload GS_dfs = "./DATS/GraphSearch_dfs.dats"
#endif // #ifdef(GraphSearch_dfs)
//
')</pre>

Therefore, the two chosen namespaces are
##dyncode("GS") (for storing names in ##filename("GraphSearch.dats"))
and ##dyncode("GS_dfs") (for storing names in ##filename("GraphSearch_dfs.dats"))
in this case.
')

##para('\

The rest of ##filename("QueenPuzzle.dats") is mostly similar to
what is presented
<a href="http://ats-lang.sourceforge.net/EXAMPLE/EFFECTIVATS/GraphSearch/index.html">on-line</a>
on solving 8-queen puzzle. Basically, various function templates in
##dyncode(GS) and ##dyncode(GS_dfs) needs to be given specific
implementations pertinent to the particular task of solving 8-queen
puzzle. For instance, the following implementations are given because
node marking is not needed for a tree-based search used in this case
(as there are no circular paths in a tree):

<pre
class="patsyntax"
>##dats2xhtml('\
//
implement
$GS_dfs.node_mark<>(nx) = ()
implement
$GS_dfs.node_unmark<>(nx) = ()
implement
$GS_dfs.node_is_marked<>(nx) = false
//
')</pre>

')

<h2>Playing Doublets Game</h2>

##para("""\

Doublets is a word game invented by Lewis Carroll (1832-1898), the
author of children's classics "Alice in Wonderland". Given two words
recognized in a chosen dictionary, they are said to be one-step
connected if they differ precisely at one position in their
spellings. Clearly, two connected words must contain the same number
of characters. Two given words ##dyncode(W1) and ##dyncode(W2) are
many-step connected if a sequence of words beginning with
##dyncode(W1) and ending with ##dyncode(W2) can be found such that any
two consecutive words in this sequence are one-step connected. The
game Doublets basically asks the player to tell whether two given
words are many-step connected. For instance. ##dyncode("head") and
##dyncode("tail") form a doublet as is shown by the sequence:
##dyncode(head), ##dyncode(held), ##dyncode(hell), ##dyncode(tell),
##dyncode(tall), ##dyncode(tail).  One may play Doublets on-line by
visiting
<a href="http://ats-lang.github.io/EXAMPLE/BUCS320/Doublets/Doublets.html">this link</a>.

""")##comment("para")

##para('\

The following lines in ##filename("Doublets.dats") are for
statically loading some files in <u>atscntrb-bucs320-graphsearch</u>:

<pre
class="patsyntax"
>##dats2xhtml('\
//
#define GRAPHSEARCH_BFS 1 // for breadth-first search
//
#include "$PATSHOMELOCS/atscntrb-bucs320-graphsearch/mylibies.hats"
//
')</pre>

The <u>#include</u> directive indicates to <u>patsopt</u> that the
file following it should be <em>included</em>.  The name
##filename("mylibies.hats") is conventional in the sense that it
refers to a file that should be only used to statically load files
into certain namespaces.  In this case, the two chosen namespaces are
##dyncode("GS") (for storing names in ##filename("GraphSearch.dats"))
and ##dyncode("GS_bfs") (for storing names in
##filename("GraphSearch_bfs.dats")).

')

##para('\

The rest of ##filename("Doublets.dats") is mostly similar to
what is presented
<a href="http://ats-lang.sourceforge.net/EXAMPLE/EFFECTIVATS/GraphSearch/index.html">on-line</a>
on playing the doublets game.

')

<h2>Compiling and Testing</h2>

##para("""\

Please find in the following files the entirety of the code presented
in this article:

<pre>
package.json // for using with the npm tool-chain
QueenPuzzle.dats // solving 8-queen puzzle with GraphSearch_dfs
DoubletsPlay.dats // implementing Doublets based on GraphSearch_bfs
</pre>

In addition, there is an accompanying ##filename("Makefile") for compiling
and testing the code.\

""")

<hr size="2">
<p>
This article is written by <a href="http://www.cs.bu.edu/~hwxi/">Hongwei Xi</a>.
</p>
##thePage_script()
</body>
</html>
