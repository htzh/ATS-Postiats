%{
//
dynload "libatsdoc/dynloadall.dats"
//
#include "./../MYTEXT/int2proginats.dats"
//
%}\
#comment("\n\
The file is automatically generated by [atsdoc] from main.atxt.\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
<chapter id="dataviews">
#title("Dataviews as Linear Dataprops")

#para("\

The at-views of the form #stacode("T@L") for types T and addresses L are
building blocks for constructing other forms of views. One mechanism for
putting together such building blocks is by declaring dataviews, which is
mostly identical to declaring dataprops. I now present in this chapter some
commonly encountered dataviews and their uses.

")

#para('\

Please find #mycodelink("CHAP_DATAVIEW/", "on-line") the code presented
for illustration in this chapter.

')

<sect1
id="optional_views">
#title("Optional Views")

#para('\

The dataview #stacode("option_v") is declared as follows:

#dats2xhtml('\
dataview option_v (v:view+, bool) =
  | Some_v (v, true) of (v) | None_v (v, false) of ()
')

This declaration indicates that the dataview #stacode("option_v") is
covariant in its first argument and there are two proof constructors
associated with it: #dyncode("Some_v") and #dyncode("None_v").  Given a
view V, #stacode("option_v(V, b)") is often called an optional view, where
b is a boolean. Clearly, a proof of the view #dyncode("option_v(V, true)")
contains a proof of the view V while a proof the view #stacode("option_v(V,
false)") contains nothing.

')

#para('\

As an example, the following function interface involves a typical use of
optional view:

#sats2xhtml('\
fun{a:t@ype}
ptr_alloc_opt (): [l:addr] (option_v (a? @ l, l > null) | ptr l)
')

Given a type T, the function #dyncode("ptr_alloc_opt&lt;T&gt;") returns a
pointer paired with a proof of an optional view; if the returned pointer is
not null, then the proof can be turned into a proof of the view
#stacode("T?@L"), where L is the location to which the pointer points;
otherwise, there is no at-view associated with the returned pointer.

')

</sect1>#comment("sect1/id=optional_views")

<sect1
id="disjunctive_views">
#title("Disjunctive Views")

#para('\

The dataview #stacode("VOR") is declared as follows:

#sats2xhtml('\
dataview VOR (v0:view+, v1:view+, int) =
  | VORleft (v0, v1, 0) of (v0) | VORright (v0, v1, 1) of (v1)
')

This declaration indicates that the dataview #stacode("VOR") is covariant
in its first and second arguments and there are two proof constructors
associated with it: #dyncode("VORleft") and #dyncode("VORright"). Given
views V#sub("0") and V#sub("1"), a proof of #stacode("VOR(V#sub("0"),
V#sub("1"), 0)") can be turned into a proof of V#sub("0") and a proof of
#stacode("VOR(V#sub("0"), V#sub("1"), 1)") can be turned into a proof of
V#sub("1").

')

#para('\

Let T be some type. The following function interface states that
#dyncode("getopt") takes an unintialized pointer and returns an integers
indicating whether the pointer is initialized:

#sats2xhtml('\
fun getopt{l:addr}
  (pf: T? @ l | ptr (l)): [i:int] (VOR (T? @ l, T @ l, i) | int (i))
')

The following code shows a typical use of #dyncode("getopt"):

#dats2xhtml('\
fun foo (): void = let
  var x: T?
  val (pfor | i) = getopt (view@(x) | addr@(x))
in
//
if i = 0
  then let
    prval VORleft (pf0) = pfor in view@(x) := pf0 // uninitialized
  end // end of [then]
  else let
    prval VORright (pf1) = pfor in view@(x) := pf1 // initialized
  end // end of [else]
// end of [if]
//
end // end of [foo]
')

')

#para('\

In ATS, there is a type constructor #stacode("opt") that takes a type T and
a boolean B to form an opt-type #dyncode("opt(T, B)") such that
#dyncode("opt(T, B)") equals T if B is true and it equals T? if B is false.
The function #dyncode("getopt") can be given the following interface
that makes use of an opt-type:

#sats2xhtml('\
fun getopt (x: &T? >> opt (T, b)): #[b:bool] bool(b)
')

The code that calls #dyncode("getopt") can now be implemented as follows:

#dats2xhtml('\
fun foo (): void = let
  var x: T?
  val ans = getopt (x)
in
//
if (ans)
  then let
    prval () = opt_unsome(x) in (*initialized*)
  end // end of [then]
  else let
    prval () = opt_unnone(x) in (*uninitialized*)
  end // end of [else]
// end of [if]
//
end // end of [foo]
')

where the proof functions #dyncode("opt_unsome") and #dyncode("opt_unnone")
are assgined the following types:

#sats2xhtml('\
prfun opt_unsome{a:t@ype} (x: !opt (a, true) >> a): void
prfun opt_unnone{a:t@ype} (x: !opt (a, false) >> a?): void
')

Compared to the version that uses #stacode("VOR"), this version based on
opt-type is considerably less verbose.

')

</sect1>#comment("sect1/id=disjunctive_views")

<sect1
id="linear_arrays">
#title("Dataview for Linear Arrays")

#para('\

Unlike in most programming languages, arrays are not a primitive data
structure in ATS. More specifically, persistent arrays can be implemented
based on linear arrays, which allow for being freed safely by the
programmer, and linear arrays can be implemented based on
at-views. Intuitively, the view for an array storing N elements of type
T consists of N at-views: T@L#sub("0"), T@L#sub("1"), ..., and
T@L#sub("N-1"), where L#sub("0") is the starting address of the array and
each subsequent L equals the previous one plus the size of T, that is, the
number of bytes needed to store a value of the type T. The following
declared dataview #stacode("array_v") precisely captures this intuituion:

')

#sats2xhtml('\
dataview
array_v (
  a:t@ype+ // covariant argument
, addr(*beg*)
, int(*size*)
) = // array_v
  | {l:addr}
    array_v_nil (a, l, 0)
  | {l:addr}{n:nat}
    array_v_cons (a, l, n+1) of (a @ l, array_v (a, l+sizeof(a), n))
// end of [array_v]
')

#para('\

Given a type T, an address L and an integer N, #stacode("array_v(T, L, N)")
is a view for the array starting at L that stores N elements of the type T.
As can be readily expected, the function templates for array-accessing and
array-updating are given the following interfaces:

')

#sats2xhtml('\
//
fun{
a:t@ype
} arrget{l:addr}{n,i:nat | i < n}
  (pf: !array_v (a, l, n) | p: ptr l, i: int i): a
// end of [arrget] // end of [fun]
//
fun{
a:t@ype
} arrset{l:addr}{n,i:nat | i < n}
  (pf: !array_v (a, l, n) | p: ptr l, i: int i, x: a): void
// end of [arrset] // end of [fun]
//
')

#para('\

Before implementing #dyncode("arrget") and #dyncode("arrset"), I present as
follows some code that implements a function template to access the first
element of a nonempty array:

')

#dats2xhtml('\
fun{
a:t@ype
} arrgetfst{l:addr}{n:pos}
(
  pf: !array_v (a, l, n) | p: ptr l
) : a = x where {
  prval array_v_cons (pf1, pf2) = pf
  // pf1: a @ l; pf2: array_v (a, l+sizeof(a), n-1)
  val x = !p
  prval () = pf := array_v_cons (pf1, pf2)
} // end of [arrgetfst]
')

#para('\

Obviously, the function template #dyncode("arrget") can be implemented
based on #dyncode("arrgetfst"):

')

#dats2xhtml('\
implement
{a}(*tmp*)
arrget (pf | p, i) =
  if i > 0 then let
    prval array_v_cons (pf1, pf2) = pf
    val x = arrget (pf2 | ptr_succ<a> (p), i-1)
    prval () = pf := array_v_cons (pf1, pf2)
  in
    x
  end else
    arrgetfst (pf | p)
  // end of [if]
')

#para('\

This is a tail-recursive implementation of time-complexity O(n). However,
the very point of having arrays is to support O(1)-time accessing and
updating operations. My initial effort spent on implementing such
operations immediately dawned on me the need to construct proof functions
for supporting view-changes (of no run-time cost).

')

#para('\

Clearly, an array starting at L that stores N elements of type T can also
be thought of as two arrays: one starting at L that stores I elements while
the other starting at L+I*sizeof(T) that stores N-I elements, where I is
an natural number less that or equal to N. Formally, this statement can be
encoded in the type of the proof function #dyncode("array_v_split"):

')

#sats2xhtml('\
prfun
array_v_split
  {a:t@ype}
  {l:addr}{n,i:nat | i <= n}
(
  pfarr: array_v (a, l, n)
) : (array_v (a, l, i), array_v (a, l+i*sizeof(a), n-i))
')

#para('\

The other direction of the above statement can be encoded in the type of
the proof function #dyncode("array_v_unsplit"):

')

#sats2xhtml('\
prfun
array_v_unsplit
  {a:t@ype}
  {l:addr}{n1,n2:nat}
(
  pf1arr: array_v (a, l, n1), pf2arr: array_v (a, l+n1*sizeof(a), n2)
) : array_v (a, l, n1+n2)
')

#para('\

With #dyncode("array_v_split") and #dyncode("array_v_unsplit"), we can
readily give implementations of #dyncode("arrget") and #dyncode("arrset")
that are O(1)-time:

')

#dats2xhtml('\
implement
{a}(*tmp*)
arrget{l}{n,i}
  (pf | p, i) = x where {
  prval (pf1, pf2) = array_v_split{a}{l}{n,i}(pf)
  prval array_v_cons (pf21, pf22) = pf2
  val x = ptr_get1<a> (pf21 | ptr_add<a> (p, i))
  prval pf2 = array_v_cons (pf21, pf22)
  prval () = pf := array_v_unsplit{a}{l}{i,n-i}(pf1, pf2)
} (* end of [arrget] *)

implement
{a}(*tmp*)
arrset{l}{n,i}
  (pf | p, i, x) = () where {
  prval (pf1, pf2) = array_v_split{a}{l}{n,i}(pf)
  prval array_v_cons (pf21, pf22) = pf2
  val () = ptr_set1<a> (pf21 | ptr_add<a> (p, i), x)
  prval pf2 = array_v_cons (pf21, pf22)
  prval () = pf := array_v_unsplit{a}{l}{i,n-i}(pf1, pf2)
} (* end of [arrset] *)
')

#para('\

Of course, the proof functions #dyncode("array_v_split") and
#dyncode("array_v_split") are still to be implemented, which I will do when
covering the topic of view-change.

')

#para('\

Given a type T, an address L and a natural number N, a proof of the view
#stacode("array_v(T?, L, N)") can be obtained and released by calling the
functions #dyncode("malloc") and #dyncode("free"), respectively, which are
to be explained in details elsewhere. I now give as follows an implemention
of a function template for array intialization:

')

#dats2xhtml('\
typedef natLt (n:int) = [i:nat | i < n] int (i)

fun{a:t@ype}
array_ptr_tabulate
  {l:addr}{n:nat}
(
  pf: !array_v (a?,l,n) >> array_v (a,l,n)
| p: ptr (l), n: int (n), f: natLt(n) -<cloref1> a
) : void = let
  fun loop{l:addr}
    {i:nat | i <= n} .<n-i>.
  (
    pf: !array_v (a?,l,n-i) >> array_v (a,l,n-i)
  | p: ptr l, n: int n, f: natLt(n) -<cloref1> a, i: int i
  ) : void =
    if i < n then let
      prval array_v_cons (pf1, pf2) = pf
      val () = !p := f (i)
      val () = loop (pf2 | ptr_succ<a> (p), n, f, i+1)
    in
      pf := array_v_cons (pf1, pf2)
    end else let
      prval array_v_nil () = pf in pf := array_v_nil {a} ()
    end // end of [if]
  // end of [loop]
in
  loop (pf | p, n, f, 0)
end // end of [array_ptr_tabulate]
')

#para('\

Given a natural number n, the type #stacode("natLt(n)") is for all natural
numbers less than n. Given a type T, the function
#dyncode("array_ptr_tabulate&lt;T&gt;") takes a pointer to an uninitialized
array, the size of the array and a function f that maps each natural number
less than n to a value of the type T, and it initializes the array with the
sequence of values of f(0), f(1), ..., and f(n-1). In other words, the
array stores a tabulation of the given function f after the initialization
is over.

')

#para('\

Given a type T and an integer N, @[T][N] is a built-in type in ATS for N
consecutive values of the type T. Therefore, the at-view @[T][N]@L for any
given address L is equivalent to the array-view #dyncode("array_v(T, L,
N)").  By making use of the feature of call-by-reference, we can also
assign the following interfaces to the previously presented functions
#dyncode("arrget") and #dyncode("arrset"):

#sats2xhtml('\
//
fun{
a:t@ype
} arrget {n,i:nat | i < n} (A: &(@[a][n]), i: int i): (a)
//
fun{
a:t@ype
} arrset {n,i:nat | i < n} (A: &(@[a][n]), i: int i, x: a): void
//
')

These interfaces are more concise as they obviate the need to mention
explicitly where the array argument is located.

')

#para("\

Please find the entirety of the above presented code
#mycodelink("CHAP_DATAVIEW/array.dats", "on-line").

")

</sect1>#comment("sect1/id=linear_arrays")

<!-- ****** ****** -->

<sect1
id="linear_strings">
#title("Dataview for Linear Strings")

#para('\

The following dataview #stacode("strbuf_v") captures the notion of a
string in C, which consisits a sequence of non-null characters followed by the
null character:

#sats2xhtml('\
dataview
strbuf_v(addr, int) =
  | {l:addr}
    strbuf_v_nil(l, 0) of (char(0) @ l)
  | {l:addr}{n:nat}
    strbuf_v_cons(l, n+1) of (charNZ @ l, strbuf_v(l+sizeof(char), n))
')

Let us define a linear type #stacode("strptr") as follows:

#sats2xhtml('\
vtypedef strptr(l:addr, n:int) = (strbuf_v(l, n) | ptr(l))
')

Then a C-string of length N that is stored at location L can be assigned
the type #stacode("strptr(L, N)").

')#comment("para")

#para('\

Given a C-string, one can always access its first character; if the
character is null, then the C-string is empty; if it is not, then the
C-string is non-empty. The following implementation of
#dyncode("strptr_is_nil") precisely follows this simple way of testing
whether a C-string is empty or not:

#dats2xhtml('\
//
fun
strptr_is_nil
  {l:addr}{n:int}
(
  str: !strptr(l, n)
) : bool(n==0) = let
//
  prval
  (pf_at, fpf) =
    strbuf_v_getfst(str.0)
  // prval
  val c0 = !(str.1)
  prval () = str.0 := fpf(pf_at)
in
  iseqz(c0) // testing whether [c0] is null
end // end of [strptr_is_nil]
//
')

where the proof function #dyncode("strbuf_v_getfst")
is declared and implemented as follows:

#dats2xhtml('\
extern
prfun
strbuf_v_getfst
  {l:addr}{n:int}
(
  pf: strbuf_v(l, n)
) : [
  c:int | (c==0 && n==0) || (c != 0 && n > 0)
] (char(c) @ l, char(c) @ l -<lin,prf> strbuf_v(l, n))

(* ****** ****** *)

primplmnt
strbuf_v_getfst
  (pf) =
(
case+ pf of
| strbuf_v_nil(pf_at) => #[.. | (pf_at, llam(pf_at) => strbuf_v_nil(pf_at))]
| strbuf_v_cons(pf_at, pf2) => #[.. | (pf_at, llam(pf_at) => strbuf_v_cons(pf_at, pf2))]
)
')

')#comment("para")

#para('\

The following implementation gives another example of handling the dataview
#stacode("strbuf_v"):

#dats2xhtml('\
fun
strptr_length
  {l:addr}{n:int}
(
  str: !strptr(l, n)
) : size_t(n) = let
//
fun
loop
{l:addr}
{i,j:int}
(
  pf: !strbuf_v(l, i)
| p0: ptr(l), j: size_t(j)
) : size_t(i+j) = let
//
prval
[c:int]
(pf_at, fpf) = strbuf_v_getfst(pf)
//
val c0 = !p0
//
prval ((*return*)) = pf := fpf(pf_at)
//
in
//
if
iseqz(c0)
then j
else res where
{
  prval
  strbuf_v_cons(pf_at, pf2) = pf
  val res = loop(pf2 | ptr_succ<char>(p0), succ(j))
  prval ((*folded*)) = pf := strbuf_v_cons(pf_at, pf2)
} (* end of [else] *)
//
end // end of [loop]
//
in
  loop(str.0 | str.1, i2sz(0))
end // end of [strptr_length]  
')

Clearly,
the implemented function #dyncode("strptr_length")
computes the length of a given C-string.

')#comment("para")

#para('\

Please find the entirety of the above presented code
#mycodelink("CHAP_DATAVIEW/strbuf.dats", "on-line").

')#comment("para")

</sect1>#comment("sect1/id=linear_strings")

<!-- ****** ****** -->

<sect1
id="singly-linked_lists">
#title("Dataview for Singly-Linked Lists")

#para('\

The following dataview #stacode("slseg_v") captures the notion of a
singly-linked list segment:\

#sats2xhtml('\
dataview
slseg_v (
  a:t@ype+ // covariant argument
, addr(*beg*)
, addr(*end*)
, int(*length*)
) = // slseg_v
  | {l:addr}
    slseg_v_nil (a, l, l, 0) of ()
  | {l_fst:agz}{l_nxt,l_end:addr}{n:nat}
    slseg_v_cons (a, l_fst, l_end, n+1) of
      ((a, ptr l_nxt) @ l_fst, slseg_v (a, l_nxt, l_end, n))
// end of [slseg]_v
')

There are two proof constructors #dyncode("slseg_v_nil") and
#dyncode("slseg_v_cons") associated with #stacode("slseg_v"), which are
assigned the following types:

#atscode('\
//
slseg_v_nil :
  {a:t@ype}{l:addr} () -> slseg_v (a, l, l, 0)
//
slseg_v_cons :
  {a:t@ype}{l_fst:agz}{l_nxt,l_end:addr}{n:nat}
  ((a, ptr l_nxt) @ l_fst, slseg_v (a, l_nxt, l_end, n)) -> slseg_v (a, l_fst, l_end, n+1)
//
')

')#comment("para")

#para('\

Note that #stacode("agz") is a subset sort for addresses that are not null.
Given a type T, two addresses L1 and L2, and a natural number N, the view
#stacode("slseg_v(T, L1, L2, N)") is for a singly-linked list segment
containing N elements of the type T that starts at L1 and finishes at L2.
In the case where L2 is the null pointer, then the list segment is considered
a list as is formally defined below:

#dats2xhtml('\
viewdef slist_v
  (a:t@ype, l:addr, n:int) = slseg_v (a, l, null, n)
// end of [slist_v]
')

')#comment("para")

#para('\

Given a type T, a pointer pointing to L plus a proof of the view
#stacode("slist_v(T, L, N)") for some natural number N is essentially the
same as a pointer to a struct of the following declared type
#stacode("slist_struct") in C:

#atscode('\
typedef
struct slist {
  T data ; /* [T] matches the corresponding type in ATS */
  struct slist *next ; /* pointing to the tail of the list */
} slist_struct ;
')

')#comment("para")

#para('\

Let us now see a simple example involving singly-linked lists:

#dats2xhtml('\
fn{a:t@ype}
slist_ptr_length
  {l:addr}{n:nat}
(
  pflst: !slist_v (a, l, n) | p: ptr l
) : int (n) = let
  fun loop
    {l:addr}{i,j:nat} .<i>.
  (
    pflst: !slist_v (a, l, i) | p: ptr l, j: int (j)
  ) : int (i+j) =
    if p > 0 then let
      prval slseg_v_cons (pfat, pf1lst) = pflst
      val res = loop (pf1lst | !p.1, j+1) // !p.1 points to the tail
      prval () = pflst := slseg_v_cons (pfat, pf1lst)
    in
      res
    end else let // the length of a null list is 0
      prval slseg_v_nil () = pflst in pflst := slseg_v_nil (); j
    end (* end of [if] *)
  // end of [loop]
in
  loop (pflst | p, 0)
end // end of [slist_ptr_length]
')

The function template #dyncode("slist_ptr_length") computes the length of a
given singly-linked list. Note that the inner function #dyncode("loop") is
tail-recursive. The above implementation of #dyncode("slist_ptr_length")
essentially corresponds to the following implementation in C:

#atscode('\
int
slist_ptr_length
(
  slist_struct *p
) {
  int res = 0 ;
  while (p != NULL) { res = res + 1 ; p = p->next ; }
  return res ;
} // end of [slist_ptr_length]
')

')#comment("para")

#para('\

As another example, the following function template
#dyncode("slist_ptr_reverse") turns a given linked list into its reverse:

#dats2xhtml('\
fn{a:t@ype}
slist_ptr_reverse
  {l:addr}{n:nat}
(
  pflst: slist_v (a, l, n) | p: ptr l
) : [l:addr] (slist_v (a, l, n) | ptr l) = let
  fun loop
    {n1,n2:nat}
    {l1,l2:addr} .<n1>. (
    pf1lst: slist_v (a, l1, n1)
  , pf2lst: slist_v (a, l2, n2)
  | p1: ptr l1, p2: ptr l2
  ) : [l:addr] (slist_v (a, l, n1+n2) | ptr l) =
    if p1 > 0 then let
      prval slseg_v_cons (pf1at, pf1lst) = pf1lst
      val p1_nxt = !p1.1
      val () = !p1.1 := p2
    in
      loop (pf1lst, slseg_v_cons (pf1at, pf2lst) | p1_nxt, p1)
    end else let
      prval slseg_v_nil () = pf1lst in (pf2lst | p2)
    end // end of [if]
in
  loop (pflst, slseg_v_nil | p, the_null_ptr)
end // end of [slist_ptr_reverse]
')

By translating the tail-recursive function #dyncode("loop") into a
while-loop, we can readily turn the implementation of
#dyncode("slist_ptr_reverse") in ATS into the following implementation in
C:

#atscode('\
slist_struct*
slist_ptr_reverse
(
  slist_struct *p
) {
  slist_struct *tmp, *res = NULL ;
  while (p != NULL) {
    tmp = p->next ; p->next = res ; res = p ; p = tmp ;
  }
  return res ;
} // end of [slist_ptr_reverse]
')

')#comment("para")

#para('\

Let us see yet another example.
List concatenation is a common operation on lists. This time, we first give
an implementation of list concatenation in C:

#atscode('\
slist_struct*
slist_ptr_append
  (slist_struct *p, slist_struct *q) {
  slist_struct *p1 = p ;
  if (p1 == NULL) return q ;
  while (p1->next != NULL) p1 = p1->next ; p1->next = q ;
  return p ;
} // end of [slist_ptr_append]
')

The algorithm is straightforward. If #dyncode("p") is null, then
#dyncode("q") is returned. Otherwise, the last node in the list pointed to
by #dyncode("p") is first found and its field of the name #dyncode("next")
then replaced with #dyncode("q").  This implementation of
#dyncode("slist_ptr_append") in C can be translated directly into to
the following one in ATS:

#dats2xhtml('\
fn{a:t@ype}
slist_ptr_append
  {l1,l2:addr}{n1,n2:nat}
(
  pf1lst: slist_v (a, l1, n1)
, pf2lst: slist_v (a, l2, n2)
| p1: ptr l1, p2: ptr l2
) : [l:addr] (slist_v (a, l, n1+n2) | ptr l) = let
  fun loop
    {n1,n2:nat}
    {l1,l2:addr | l1 > null} .<n1>. (
    pf1lst: slist_v (a, l1, n1)
  , pf2lst: slist_v (a, l2, n2)
  | p1: ptr l1, p2: ptr l2
  ) : (slist_v (a, l1, n1+n2) | void) = let
    prval slseg_v_cons (pf1at, pf1lst) = pf1lst
    val p1_nxt = !p1.1
  in
    if p1_nxt > 0 then let
      val (pflst | ()) = loop (pf1lst, pf2lst | p1_nxt, p2)
    in
      (slseg_v_cons (pf1at, pflst) | ())
    end else let
      val () = !p1.1 := p2
      prval slseg_v_nil () = pf1lst
    in
      (slseg_v_cons (pf1at, pf2lst) | ())
    end (* end of [if] *)
  end // end of [loop]
in
  if p1 > 0 then let
    val (pflst | ()) = loop (pf1lst, pf2lst | p1, p2)
  in
    (pflst | p1)
  end else let
    prval slseg_v_nil () = pf1lst in (pf2lst | p2)
  end (* end of [if] *)
end // end of [slist_ptr_append]
')

')#comment("para")

#para('\

In the above examples, it is evident that the code in ATS is a lot more
verbose than its counterpart in C. However, the former is also a lot more
robust than the latter in the following sense: If a minor change is made to
the code in ATS (e.g., renaming identifiers, reordering function
arguments), it is most likely that a type-error is to be reported when the
changed code is typechecked. On the other hand, the same thing cannot be
said about the code written in C. For instance, the following erroneous
implementation of #dyncode("slist_ptr_reverse") in C is certainly
type-correct:

#atscode('\
/*
** This implementation is *incorrect* but type-correct:
*/
slist_struct*
slist_ptr_reverse
  (slist_struct *p)
{
  slist_struct *tmp, *res = NULL ;
  while (p != NULL) {
    tmp = p->next ; res = p ; p->next = res ; p = tmp ;
  }
  return res ;
} // end of [slist_ptr_reverse]
')

')#comment("para")

#para('\

I now point out that the dataview #stacode("slseg_v") is declared here in a
manner that does not address the issue of allocating and freeing list
nodes, and it is done so for the sake of a less involved presentation. A
dataview for singly-linked lists that does handle allocation and
deallocation of list nodes can also be declared in ATS, but there is really
little need for it as we can declare a dataviewtype for such lists that is
far more convenient to use.  However, dataviews are fundamentally more
general and flexible than dataviewtypes, and there are many common data
structures (e.g. doubly-linked lists) that can only be properly handled
with dataviews in ATS.

')#comment("para")

</sect1>#comment("sect1/id=singly-linked_lists")

<!-- ****** ****** -->

<sect1 id="view-changes">
#title("Proof Functions for View-Changes")

#para("\

By the phrase #emphasis("view-change"), I mean applying a function to
proofs of a set of views to turn them into proofs of another set of views.
As this function itself is a proof function, there is no run-time cost
associated with each view-change. For instance, a proof of the at-view
int32@L for any address L can be turned into a proof of a tuple of 4
at-views: int8@L, int8@L+1, int8@L+2 and int8@L+3, where int32 and int8 are
types for 32-bit and 8-bit integers, respectively. Often more interesting
view-changes involve recursively defined proof functions, and I present
several of such cases in the rest of this section.

")

#para("\

When implementing an array subscripting operation of O(1)-time, we need a
proof function to change the view of one array into the views of two
adjacently located arrays and another proof function to do precisely the
opposite. Formally speaking, we need to construct the following two proof
functions #dyncode("array_v_split") and #dyncode("array_v_unsplit"):

")

#sats2xhtml('\
//
prfun
array_v_split
  {a:t@ype}
  {l:addr}{n,i:nat | i <= n}
(
  pfarr: array_v (a, l, n)
) : (array_v (a, i, l), array_v (a, n-i, l+i*sizeof(a)))
//
prfun
array_v_unsplit
  {a:t@ype}
  {l:addr}{n1,n2:nat}
(
  pf1arr: array_v (a, l, n1), pf2arr: array_v (a, l+n1*sizeof(a), n2)
) : array_v (a, l, n1+n2)
//
')

#para('\

An implementation of #dyncode("array_v_split") is given as follows:

')

#dats2xhtml('\
primplmnt
array_v_split
  {a}{l}{n,i}(pfarr) = let
  prfun split
    {l:addr}{n,i:nat | i <= n} .<i>.
  (
    pfarr: array_v (a, l, n)
  ) : (
    array_v (a, l, i)
  , array_v (a, l+i*sizeof(a), n-i)
  ) =
    sif i > 0 then let
      prval array_v_cons (pf1, pf2arr) = pfarr
      prval (pf1res1, pf1res2) = split{..}{n-1,i-1} (pf2arr)
    in
      (array_v_cons (pf1, pf1res1), pf1res2)
    end else let
      prval EQINT () = eqint_make{i,0}((*void*))
    in
      (array_v_nil (), pfarr)
    end // end of [sif]
in
  split (pfarr)
end // end of [array_v_split]
')

#para('\

Note that the keyword #keycode("primplmnt") (instead of
#keycode("implement")) should be used for implementing proof functions.
One can also choose to use the keyword #keycode("primplement") in place of
#keycode("primplmnt"). Clearly, the proof function #dyncode("split")
directly encodes a proof based on mathematical induction. Following is an
implementation of #dyncode("array_v_unsplit"):

#dats2xhtml('\
primplmnt
array_v_unsplit
  {a}{l}{n1,n2}
  (pf1arr, pf2arr) = let
  prfun unsplit
    {l:addr}{n1,n2:nat} .<n1>.
  (
    pf1arr: array_v (a, l, n1)
  , pf2arr: array_v (a, l+n1*sizeof(a), n2)
  ) : array_v (a, l, n1+n2) =
    sif n1 > 0 then let
      prval
      array_v_cons (pf1, pf1arr) = pf1arr
      prval pfres = unsplit (pf1arr, pf2arr)
    in
      array_v_cons (pf1, pfres)
    end else let
      prval array_v_nil () = pf1arr in pf2arr
    end // end of [sif]
in
  unsplit (pf1arr, pf2arr)
end // end of [array_v_unsplit]
')

The proof function #dyncode("unsplit") also directly encodes a proof based on
mathematical induction.

')

#para('\

Let us now see an even more interesting proof function for performing
view-change.  The interface of the proof function #dyncode("array_v_takeout")
is given as follows:

')

#sats2xhtml('\
//
prfun
array_v_takeout
  {a:t@ype}
  {l:addr}{n,i:nat | i < n}
(
  pfarr: array_v (a, l, n)
) : (a @ l+i*sizeof(a), a @ l+i*sizeof(a) -<lin,prf> array_v (a, l, n))
//
')

#para('\

Note that the following type is for a linear proof function that takes a
proof of an at-view to return a proof of an array-view:

#atscode('\
a @ l+i*sizeof(a) -<lin,prf> array_v (a, l, n)
')

As such a function essentially represents an array with one missing cell,
we may simply say that #dyncode("array_v_takeout") turns the view of an
array into an at-view (for one cell) and a view for the rest of the array.
By making use of #dyncode("array_v_takeout"), we can give another
implementation of #dyncode("arrget"):

#dats2xhtml('\
implement
{a}(*tmp*)
arrget{l}{n,i}
  (pf | p, i) = x where {
  prval (pf1, fpf2) =
  array_v_takeout{a}{l}{n,i} (pf)
  val x = ptr_get1<a> (pf1 | ptr_add<a> (p, i))
  prval () = pf := fpf2 (pf1) // putting the cell and the rest together
} (* end of [arrget] *)
')

')

#para('\

The proof function #dyncode("array_v_takeout") can be implemented as follows:\

')

#dats2xhtml('\
primplmnt
array_v_takeout
  {a}{l}{n,i}(pfarr) = let
  prfun takeout
    {l:addr}{n,i:nat | i < n} .<i>.
  (
    pfarr: array_v (a, l, n)
  ) : (
    a @ l+i*sizeof(a)
  , a @ l+i*sizeof(a) -<lin,prf> array_v (a, l, n)
  ) = let
    prval array_v_cons (pf1at, pf1arr) = pfarr
  in
    sif i > 0 then let
      prval (pfres, fpfres) = takeout{..}{n-1,i-1}(pf1arr)
    in
      (pfres, llam (pfres) => array_v_cons (pf1at, fpfres (pfres)))
    end else let
      prval EQINT () = eqint_make{i,0}((*void*))
    in
      (pf1at, llam (pf1at) => array_v_cons (pf1at, pf1arr))
    end // end of [sif]
  end // end of [takeout]
in
  takeout{l}{n,i}(pfarr)
end // end of [array_v_takeout]
')

#para('\

Note that #dyncode("llam") is a keyword for forming linear functons.  Once
a linear function is applied, it is consumed and the resource in it, if not
reclaimed, moves into the result it returns.

')

#para('\

The proof functions presented so far for view-changes are all manipulating
array-views. The following one is different in this regard as it combines
two views for singly-linked list segments into one:

#sats2xhtml('\
//
prfun
slseg_v_unsplit
  {a:t@ype}
  {l1,l2,l3:addr}{n1,n2:nat}
(
  pf1lst: slseg_v (a, l1, l2, n1), pf2lst: slseg_v (a, l2, l3, n2)
) : slseg_v (a, l1, l3, n1+n2)
//
')

The type of #dyncode("slseg_v_unsplit") essentially states that a list
segment from L1 to L2 that is of length N1 and another list segment from L2
to L3 that is of length N2 can be thought of as a list segment from L1 to
L3 that is of length N1+N2. The following implementation of
#dyncode("slseg_v_unsplit") is largely parallel to that of
#dyncode("array_v_unsplit"):

#dats2xhtml('\
primplmnt
slseg_v_unsplit
  {a}(pf1lst, pf2lst) = let
  prfun unsplit
    {l1,l2,l3:addr}{n1,n2:nat} .<n1>.
  (
    pf1lst: slseg_v (a, l1, l2, n1), pf2lst: slseg_v (a, l2, l3, n2)
  ) : slseg_v (a, l1, l3, n1+n2) =
    sif n1 > 0 then let
      prval slseg_v_cons (pf1at, pf1lst) = pf1lst
    in
      slseg_v_cons (pf1at, unsplit (pf1lst, pf2lst))
    end else let
      prval slseg_v_nil () = pf1lst in pf2lst
    end // end of [sif]
in
  unsplit (pf1lst, pf2lst)
end // end of [slseg_v_unsplit]
')

')

#para('\

The reader may find it interesting to give an implementation of
#dyncode("slist_ptr_append") by making use of #dyncode("slseg_v_unsplit").

')

#para('\

Please find on-line the files #mycodelink("CHAP_DATAVIEW/array.dats",
"array.dats") and #mycodelink("CHAP_DATAVIEW/slist.dats", "slist.dats"),
which contains the code employed for illustration in this section.

')

</sect1>#comment("sect1/id=view-changes")

#comment(" ****** ****** ")

</chapter><!--id="dataviews"-->

#comment(" end of [main.atxt] ")

%{
implement main () = fprint_filsub (stdout_ref, "main_atxt.txt")
%}
