%{
//
dynload "libatsdoc/dynloadall.dats"
//
#include "./../MYTEXT/ats2tutorial.dats"
//
%}\
#comment("\n\
The file is automatically generated
by [atsdoc] from [CHAP_STKCLO/main.atxt].\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
<chapter id="stkclo">
#title("Stack-Allocated Closure-Functions")

<!-- ****** ****** -->

#para("\

Higher-order functions are a very convenient programming feature for
supporting certain forms of code reuse. Often a function passed as an
argument to a higher-order function call is a closure-function created on
heap at run-time, and it is most likely of no more use after the call. If
the closure-function is linear, then it needs to be freed explicitly by the
programmer (or a type-error would occur during typechecking).  If the
closure-function is non-linear, then its memory should be reclaimed through
garbage-collection (GC) (or the memory is leaked).

")#comment("para")

#para("\

Creating heap-allocated closure-functions implies the need for dynamic
memory allocation (DMA). In a restricted environment (e.g., one for
embedded programming), DMA may not be (fully) supported. One option for
constructing a closure-function in the absence of support for DMA is to
store it in the stack-frame of the calling function, and there is special
systax in ATS for doing so.

")#comment("para")

#para('\

Let us see a concrete example of stack-allocated closure.
The following code implements a higher-order function template:

#dats2xhtml('\
//
fun
{res:t@ype}
ifold{n:nat}
(
  n: int(n)
, fopr: (res, natLt(n)) -<cloref1> res, ini: res
) : res = let
//
fun
loop
{i:nat | i <= n} .<n-i>.
  (i: int(i), res: res): res =
  if i < n then loop(i+1, fopr(res, i)) else res
//
in
  loop(0, ini)
end // end of [ifold]
//
')

Essentially, #dyncode("ifold(n, fopr, ini)") evaluates the expression
#dyncode("fopr(...fopr(fopr(ini, 0), 1)..., n-1)").  For instance, the
function #dyncode("dotprod") for computing the dot product (or inner
product) of two vectors can be implemented with a call to #dyncode("ifold"):

#dats2xhtml('\
//
typedef res = double
//
fun
dotprod
  {n:nat}
(
  n: int(n)
, A: arrayref(res, n)
, B: arrayref(res, n)
) : res =
(
  ifold<res>(n, lam(res, i) => res + A[i]*B[i], 0.0)
)
//
')

The second argument passed to the call to #dyncode("ifold") is a
closure created on heap at run-time, and it is of no more use
after the call returns. The function #dyncode("dotprod") can also be
implemented as follows:

#dats2xhtml('\
//
fun
dotprod
  {n:nat}
(
  n: int(n)
, A: arrayref(res, n)
, B: arrayref(res, n)
) : res = let
//
var
fopr =
lam@(res: res, i: natLt(n)): res => res + A[i]*B[i]
//
in
  ifold<res>(n, $UNSAFE.cast(addr@fopr), 0.0)
end // end of [dotprod]
//
')

The keyword #keycode("lam@") (instead of #keycode("lam")) initiates the
creation of an unboxed closure at a given location. In the above case, the
variable #dyncode("fopr") is located in the stack-frame of
#dyncode("dotprod"), and the created closure is stored in the memory
reserved for #dyncode("fopr"). It is the obligation of the compiler of ATS
to make sure that the memory is large enough for storing the closure. The
call to the (unsafe) cast turns the address of #dyncode("fopr") into a
boxed closure so that it can be passed to #dyncode("ifold").

')#comment("para")

#para('\

In order to remove the (unsafe) cast in the implementation of
#dyncode("dotprod"), we need to implement a slight variant
of #dyncode("ifold") as follows:

#dats2xhtml('\
//
fun
{res:t@ype}
ifold_{n:nat}
(
  n: int(n)
, fopr: &(res, natLt(n)) -<clo1> res, ini: res
) : res = let
//
fun
loop
{i:nat | i <= n} .<n-i>.
(
  i: int(i)
, fopr: &(res, natLt(n)) -<clo1> res, res: res
) : res =
  if i < n
    then loop(i+1, fopr, fopr(res, i)) else res
  // end of [if]
//
in
  loop(0, fopr, ini)
end // end of [ifold_]
//
(* ****** ****** *)
//
fun
dotprod_
  {n:nat}
(
  n: int(n)
, A: arrayref(res, n)
, B: arrayref(res, n)
) : res = let
//
var
fopr =
lam@(res: res, i: natLt(n)): res => res + A[i]*B[i]
//
in
  ifold_<res>(n, fopr, 0.0)
end // end of [dotprod_]
//
')

Note that the second argument of #dyncode("ifold_") is call-by-reference.
The anotated arrow #dyncode("-&lt;clo1&gt;") is used to form function types
for unboxed closures. So only a left value (representing some unboxed
closure) can be passed as the second argument to a call to
#dyncode("ifold_"), and what is really passed at run-time is the address of
the left value. The function #dyncode("dotprod") can be safely implemented
as #dyncode("dotprod_") with a call to #dyncode("ifold_").

')#comment("para")

#para("\

Please find #mycodelink("chap_stkclo.dats", "on-line") the entirety of the
code used in this chapter plus some testing code.\

")#comment("para")

<!-- ****** ****** -->

</chapter><!--"stkclo"-->

#comment(" ****** ****** ")

#comment(" end of [chap_stkclo.atxt] ")

%{
//
staload STDIO = "libc/SATS/stdio.sats"
//
implement main () = {
//
val filr =
  $STDIO.fopen_ref_exn ("../TEMP/chap_stkclo.dats", file_mode_w)
val () = fprint_theCodeLst (filr)
val () = $STDIO.fclose_exn (filr)
//
val () = fprint_filsub (stdout_ref, "main_atxt.txt")
//
} (* end of [main] *)
%}
