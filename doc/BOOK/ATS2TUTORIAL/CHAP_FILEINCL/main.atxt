%{
//
dynload "libatsdoc/dynloadall.dats"
//
#include "./../MYTEXT/ats2tutorial.dats"
//
%}\
#comment("\n\
The file is automatically generated by [atsdoc] from main.atxt.\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
<chapter id="file-inclusion">
#title("File Inclusion inside ATS Code")

#para('\

As is in C, file inclusion inside ATS code is done through the use of the
directive #emphasis("\\\#include"). For instance, the following line
indicates that a file named #emphasis("foobar") is included, that is, this
line is to be replaced with the content of the file #emphasis("foobar"):

#dats2xhtml('\
\#include "foobar.hats"
')

Note that the included file is parsed according to the syntax for statics
or dynamics depending on whether the file is included in a static or
dynamic file.  As a convention, the name of an included file often ends
with the extension #emphasis(".hats").\

')#comment("para")

#para('\

A common use of file inclusion is to keep some constants, flags or
parameters being defined consistently across a set of files. For instance,
the file #myatscodelink("prelude/params.hats", "prelude/params.hats") serves
such a purpose.  File inclusion can also be used to emulate (in a limited
but rather useful manner) functors supported in languages such as SML and
OCaml.\

')

</chapter><!--"file-inclusion"-->

#comment(" ****** ****** ")

#comment(" end of [main.atxt] ")

%{
implement main () = fprint_filsub (stdout_ref, "main_atxt.txt")
%}
