%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"gindex.sats"
val () = theTextMap_insert_str ("thisfilename", _thisfilename)
%}

#atscode_banner()
#atscode_copyright_GPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/SATS/CODEGEN/gindex.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("September, 2011")

#atscode_separator()

sortdef t0p = t@ype

#atscode_separator()

fun{tk:tk}
gindex_succ (x: gindex (tk, i)):<> gindex (tk, i+1)

fun{tk:tk}
gindex_pred
  {i:int | i > 0} (x: gindex (tk, i)):<> gindex (tk, i-1)
// end of [gindex_pred]

#atscode_separator()

fun{tk:tk}
gindex_lt (x: gindex (tk1, i), y: g1index (tk, j)):<> bool (i < j)
overload < with gindex_lt
fun{tk:tk}
gindex_lte (x: gindex (tk1, i), y: g1index (tk, j)):<> bool (i <= j)
overload <= with gindex_lte

fun{tk:tk}
gindex_gt (x: gindex (tk1, i), y: g1index (tk, j)):<> bool (i < j)
overload > with gindex_gt
fun{tk:tk}
gindex_gte (x: gindex (tk1, i), y: g1index (tk, j)):<> bool (i <= j)
overload >= with gindex_gte

#atscode_separator()

fun{tk:tk}
gindex_gt_int (x: gindex (tk, i), y: int (j)):<> bool (i > j)
overload > with gindex_gt_int
fun{tk1,tk2:tk}
gindex_gte_int (x: gindex (tk1, i), y: int (j)):<> bool (i >= j)
overload >= with gindex_gt_int

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement
main (argc, argv) =
  fprint_filsub (stdout_ref, "gindex_atxt.txt")
%}\
