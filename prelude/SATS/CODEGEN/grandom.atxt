%{
//
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"grandom.sats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
//
#include "prelude_SATS_atext.hats"
//
%}\
\
#atscode_banner()
#atscode_copyright_GPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/SATS/CODEGEN/grandom.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("gmhwxiATgmailDOTcom")
#atscode_start_time("June, 2015")

#atscode_separator()
//
fun{a:vt0p}
grandom_val (): a // for randval generation
//
fun{a:vt0p} // for random value
grandom_ref (x: &(a?) >> a): void // initialization
//
#atscode_separator()
//
fun{} grandom_int(): int
fun{} grandom_uint(): uint
//
fun{} grandom_bool(): bool
//
fun{} grandom_float(): float
fun{} grandom_double(): double
//
#atscode_separator()
//
fun{a:t0p}
grandom_list
  {n:nat}(n: int(n)): list(a, n)
//
fun{a:vt0p}
grandom_list_vt
  {n:nat}(n: int(n)): list_vt(a, n)
//
#atscode_separator()
//
fun{a:vt0p}
grandom_arrayptr
  {n:int}(asz: size_t(n)): arrayptr(a, n)
fun{a:vt0p}
grandom_arrayref
  {n:int}(asz: size_t(n)): arrayref(a, n)
//
fun{a:vt0p}
grandom_arrszref(asz: size_t): arrszref(a)
//
#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement
main (argc, argv) =
  fprint_filsub (stdout_ref, "grandom_atxt.txt")
%}\
