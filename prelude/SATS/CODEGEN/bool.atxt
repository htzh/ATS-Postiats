%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"bool.sats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_GPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/SATS/CODEGEN/bool.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("September, 2011")

#atscode_separator()
//
castfn g0ofg1_bool (x: Bool):<> bool
castfn g1ofg0_bool (x: bool):<> Bool
//
overload g0ofg1 with g0ofg1_bool // index-erasing
overload g1ofg0 with g1ofg0_bool // index-inducing
//
#atscode_separator()
//
fun
int2bool0 (i: int):<> bool = "mac\#%"
fun
int2bool1
  {i:int} (i: int i):<> bool(i != 0) = "mac\#%"
//
symintr int2bool
overload int2bool with int2bool0 of 0
overload int2bool with int2bool1 of 10
//
fun
bool2int0 (b: bool):<> natLt(2) = "mac\#%"
fun
bool2int1
  {b:bool} (b: bool b):<> int(bool2int(b)) = "mac\#%"
//
symintr bool2int
overload bool2int with bool2int0 of 0
overload bool2int with bool2int1 of 10
//
#atscode_separator()

(*
//
// HX: declared in [prelude/basics_dyn.sats]
//
val true : bool (true) and false : bool (false)
*)

#atscode_separator()

(*
** HX-2012-06:
** shortcut version of disjuction and conjuction
** note that these two cannot be declared as functions
*)
macdef || (b1, b2) = (if ,(b1) then true else ,(b2)): bool
macdef && (b1, b2) = (if ,(b1) then ,(b2) else false): bool

#atscode_separator()

typedef boolLte (b: bool) = [a: bool | a <= b] bool (a)
typedef boolGte (b: bool) = [a: bool | a >= b] bool (a)

#atscode_separator()
//
fun
neg_bool0
  (b: bool):<> bool = "mac\#%"
//
overload ~ with neg_bool0 of 0
overload not with neg_bool0 of 0
//
#atscode_separator()
//
fun
add_bool0_bool0
  (b1: bool, b2: bool):<> bool = "mac\#%"
fun
mul_bool0_bool0
  (b1: bool, b2: bool):<> bool = "mac\#%"
//
overload + with add_bool0_bool0 of 0
overload * with mul_bool0_bool0 of 0
//
#atscode_separator()
//
fun
xor_bool0_bool0
  (b1: bool, b2: bool):<> bool = "mac\#%"
//
overload xor with xor_bool0_bool0 of 0
//
#atscode_separator()

%{
fun
fun_bool_cmp0_decl (
  opr: string
) : atext = let
//
val fopr_d = (
  case+ opr of
  | "lt" => "<" | "lte" => "<="
  | "gt" => ">" | "gte" => ">="
  | "eq" => "=" | "neq" => "!="
  | _ => opr
) : string // end of [val]
//
val
ent =
sprintf ("\
fun
%s_bool0_bool0
  (b1: bool, b2: bool):<> bool = \"mac#%%\"
overload %s with %s_bool0_bool0 of 0\
", @(
 opr, fopr_d, opr
)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_bool_cmp0_decl]
%}\
\
#fun_bool_cmp0_decl("lt")
#fun_bool_cmp0_decl("lte")

#fun_bool_cmp0_decl("gt")
#fun_bool_cmp0_decl("gte")

#fun_bool_cmp0_decl("eq")
#fun_bool_cmp0_decl("neq")
overload <> with neq_bool0_bool0 of 0

#atscode_separator()

fun compare_bool0_bool0
  (b1: bool, b2: bool):<> Sgn = "mac\#%"
overload compare with compare_bool0_bool0

#atscode_separator()
//
// HX:
// return is statically allocated
//
fun
bool2string(b: bool):<> string = "mac\#%"
//
#atscode_separator()
//
fun print_bool (x: bool): void = "mac\#%"
fun prerr_bool (x: bool): void = "mac\#%"
fun fprint_bool : fprint_type (bool) = "mac\#%"
//
overload print with print_bool
overload prerr with prerr_bool
overload fprint with fprint_bool
//
#atscode_separator()
//
fun
neg_bool1
  {b:bool}
  (b: bool b):<> bool (~b) = "mac\#%"
//
overload ~ with neg_bool1 of 10
overload not with neg_bool1 of 10
//
#atscode_separator()

fun
add_bool0_bool1
  {b2:bool}
(
  b1: bool, b2: bool b2
) :<> [b1:bool] bool(b1 || b2) = "mac\#%"
overload + with add_bool0_bool1 of 10

fun
add_bool1_bool0
  {b1:bool}
(
  b1: bool b1, b2: bool
) :<> [b2:bool] bool(b1 || b2) = "mac\#%"
overload + with add_bool1_bool0 of 10

fun
add_bool1_bool1
  {b1,b2:bool}
  (b1: bool b1, b2: bool b2):<> bool(b1 || b2) = "mac\#%"
overload + with add_bool1_bool1 of 20

#atscode_separator()

fun
mul_bool0_bool1
  {b2:bool}
(
  b1: bool, b2: bool b2
) :<> [b1:bool] bool(b1 && b2) = "mac\#%"
overload * with mul_bool0_bool1 of 10

fun
mul_bool1_bool0
  {b1:bool}
(
  b1: bool b1, b2: bool
) :<> [b2:bool] bool(b1 && b2) = "mac\#%"
overload * with mul_bool1_bool0 of 10

fun
mul_bool1_bool1
  {b1,b2:bool}
  (b1: bool b1, b2: bool b2):<> bool(b1 && b2) = "mac\#%"
overload * with mul_bool1_bool1 of 20

#atscode_separator()
//
fun
xor_bool1_bool1
  {b1,b2:bool}
  (b1: bool b1, b2: bool b2):<> bool((b1)==(~b2)) = "mac\#%"
//
overload xor with xor_bool1_bool1 of 20
//
#atscode_separator()

%{
fun
fun_bool_cmp1_decl (
  opr: string
) : atext = let
//
val fopr_s = (
  case+ opr of
  | "lt" => "<" | "lte" => "<="
  | "gt" => ">" | "gte" => ">="
  | "eq" => "==" | "neq" => "!="
  | _ => opr
) : string // end of [val]
val fopr_d = (
  case+ opr of
  | "lt" => "<" | "lte" => "<="
  | "gt" => ">" | "gte" => ">="
  | "eq" => "=" | "neq" => "!="
  | _ => opr
) : string // end of [val]
//
val
ent =
sprintf ("\
fun
%s_bool1_bool1 {b1,b2:bool}
  (b1: bool (b1), b2: bool (b2)) :<> bool (b1 %s b2) = \"mac#%%\"
overload %s with %s_bool1_bool1 of 20\
", @(
 opr, fopr_s, fopr_d, opr
)
) // end of [sprintf] // end of [val]
//
in
  atext_strptr (ent)
end // end of [fun_bool_cmp1_decl]
%}\
//
// (b1 < b2) == (~b1 && b2)
//
#fun_bool_cmp1_decl("lt")
//
// (b1 <= b2) == (~b1 || b2)
//
#fun_bool_cmp1_decl("lte")
//
// (b1 > b2) == (b1 && ~b2)
//
#fun_bool_cmp1_decl("gt")
//
// (b1 >= b2) == (b1 || ~b2)
//
#fun_bool_cmp1_decl("gte")

#atscode_separator()

#fun_bool_cmp1_decl("eq")
#fun_bool_cmp1_decl("neq")
overload <> with neq_bool1_bool1 of 20

#atscode_separator()

fun
compare_bool1_bool1
  {b1,b2:bool} // HX: this one is a function
(
 b1: bool b1, b2: bool b2
) :<> int (bool2int(b1) - bool2int(b2)) = "mac\#%"
overload compare with compare_bool1_bool1 of 20

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement
main (argc, argv) =
  fprint_filsub (stdout_ref, "bool_atxt.txt")
%}\
