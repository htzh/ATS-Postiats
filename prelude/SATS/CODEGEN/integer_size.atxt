%{
//
#define
ATSCODEFORMAT "txt"
//
#if
(ATSCODEFORMAT == "txt")
//
#include
"utils/atsdoc/HATS/postiatsatxt.hats"
//
#endif // end of [ATSCCODEFORMAT]
//
#include "prelude_SATS_atext.hats"
//
val
_thisfilename = atext_strcst"integer_size.sats"
val ((*void*)) =
theAtextMap_insert_str("thisfilename", _thisfilename)
//
%}\
\
#atscode_banner()
#atscode_copyright_GPL()

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("gmhwxiATgmailDOTcom")
#atscode_start_time("January, 2013")

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/SATS/CODEGEN/integer_size.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

sortdef tk = tkind

#atscode_separator()
//
stadef sizeknd = size_kind
stadef ssizeknd = ssize_kind
//
#atscode_separator()
//
fun g0int2uint_int_size(int):<> size_t = "mac\#%"
fun g0uint2uint_uint_size(uint):<> size_t = "mac\#%"
//
fun g0int2int_int_ssize(int):<> ssize_t = "mac\#%"
fun g0uint2int_uint_ssize(uint):<> ssize_t = "mac\#%"
//
#atscode_separator()
//
fun g0int2uint_lint_size(lint):<> size_t = "mac\#%"
fun g0uint2uint_ulint_size(ulint):<> size_t = "mac\#%"
//
fun g0int2int_lint_ssize(lint):<> ssize_t = "mac\#%"
fun g0uint2int_ulint_ssize(ulint):<> ssize_t = "mac\#%"
//
#atscode_separator()
//
fun g0uint2int_size_int(size_t):<> int = "mac\#%"
fun g0uint2int_size_lint(size_t):<> lint = "mac\#%"
fun g0uint2int_size_llint(size_t):<> llint = "mac\#%"
//
fun g0uint2int_size_ssize(size_t):<> ssize_t = "mac\#%"
//
fun g0uint2uint_size_uint(size_t):<> uint = "mac\#%"
fun g0uint2uint_size_ulint(size_t):<> ulint = "mac\#%"
fun g0uint2uint_size_ullint(size_t):<> ullint = "mac\#%"
//
fun g0uint2uint_size_size(sz: size_t):<> size_t = "mac\#%"
//
#atscode_separator()
//
fun g0int2int_ssize_int(ssize_t):<> int = "mac\#%"
fun g0int2int_ssize_lint(ssize_t):<> lint = "mac\#%"
fun g0int2int_ssize_llint(ssize_t):<> llint = "mac\#%"
//
fun g0int2int_ssize_ssize(ssize_t):<> ssize_t = "mac\#%"
//
fun g0int2uint_ssize_uint(ssize_t):<> uint = "mac\#%"
fun g0int2uint_ssize_ulint(ssize_t):<> ulint = "mac\#%"
fun g0int2uint_ssize_ullint(ssize_t):<> ullint = "mac\#%"
//
fun g0int2uint_ssize_size(ssz: ssize_t):<> size_t = "mac\#%"
//
#atscode_separator()
//
fun g0uint2string_size(sz: size_t):<!wrt> Strptr1 = "mac\#%"
fun g0string2uint_size(rep: NSH(string)):<> size_t = "mac\#%"
//
fun g0int2string_ssize(ssz: ssize_t):<!wrt> Strptr1 = "mac\#%"
fun g0string2int_ssize(rep: NSH(string)):<> ssize_t = "mac\#%"
//
#atscode_separator()
//
#fprint_print_prerr_decl("size", "size_t")\
//
#fprint_print_prerr_decl("ssize", "ssize_t")\
//
#atscode_separator()
//
#g0uint_type_aop_cmp_decl("size", "size_t")\
//
#g0sint_type_aop_cmp_decl("ssize", "ssize_t")\
//
#atscode_separator()
//
fun
g1int2uint_int_size:
g1int2uint_type(intknd, sizeknd) = "mac#\%"
fun
g1uint2uint_uint_size:
g1uint2uint_type(uintknd, sizeknd) = "mac#\%"
//
fun
g1int2int_int_ssize:
g1int2int_type(intknd, ssizeknd) = "mac#\%"
fun
g1uint2int_uint_ssize:
g1uint2int_type(uintknd, ssizeknd) = "mac#\%"
//
#atscode_separator()
//
fun
g1uint2int_size_int:
g1uint2int_type(sizeknd, intknd) = "mac#\%"
fun
g1uint2uint_size_uint:
g1uint2uint_type(sizeknd, uintknd) = "mac#\%"
//
fun
g1uint2uint_size_size:
g1uint2uint_type(sizeknd, sizeknd) = "mac#\%"
//
#atscode_separator()
//
fun
g1int2int_ssize_int:
g1int2int_type(ssizeknd, intknd) = "mac#\%"
fun
g1int2uint_ssize_uint:
g1int2uint_type(ssizeknd, uintknd) = "mac#\%"
//
fun
g1int2int_ssize_ssize:
g1int2int_type(ssizeknd, ssizeknd) = "mac#\%"
//
#atscode_separator()
//
fun
g1uint2int_size_ssize:
g1uint2int_type(sizeknd, ssizeknd) = "mac#\%"
fun
g1int2uint_ssize_size:
g1int2uint_type(ssizeknd, sizeknd) = "mac#\%"
//
#atscode_separator()
//
#g1uint_type_aop_cmp_decl("size", "size_t")\
//
#g1sint_type_aop_cmp_decl("ssize", "ssize_t")\
//
#atscode_separator()
//
macdef i2sz(x) = g1int2uint_int_size(,(x))
macdef u2sz(x) = g1uint2uint_uint_size(,(x))
//
macdef i2ssz(x) = g1int2int_int_ssize(,(x))
macdef u2ssz(x) = g1uint2int_uint_ssize(,(x))
//
#atscode_separator()
//
symintr sz2i
overload sz2i with g0uint2int_size_int of 0
overload sz2i with g1uint2int_size_int of 10
//
symintr sz2u
overload sz2u with g0uint2uint_size_uint of 0
overload sz2u with g1uint2uint_size_uint of 10
//
#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement
main (argc, argv) =
  fprint_filsub (stdout_ref, "integer_size_atxt.txt")
%}\
