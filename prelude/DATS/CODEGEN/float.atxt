%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"float.dats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_GPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/DATS/CODEGEN/float.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("Feburary, 2012")

#atscode_separator()

\#define ATS_DYNLOADFLAG 0 // no dynloading at run-time

#atscode_separator()
%{
//
staload _(*anon*) = "prelude/DATS/list.dats"
staload _(*anon*) = "prelude/DATS/list_vt.dats"
//
%}\
//
#atscode_separator()
//
staload UN = "prelude/SATS/unsafe.sats"
//
#atscode_separator()

%{
//
fun g0float_implist (
  kname: string, tname: string
) : atext = let
//
fun f (opr: string):<cloref1> atext = let
//
val x = sprintf (
"implement g0float_%s<%s> = g0float_%s_%s\n", @(opr, kname, opr, tname)
) (* end of [val] *)
//
in
  atext_strptr (x)
end // end of [f]
//
var res: atextlst = list_nil
//
val () = res := list_cons (f "neg", res)
val () = res := list_cons (f "abs", res)
val () = res := list_cons (f "succ", res)
val () = res := list_cons (f "pred", res)
val () = res := list_cons (atext_newline(), res)
//
val () = res := list_cons (f "add", res)
val () = res := list_cons (f "sub", res)
val () = res := list_cons (f "mul", res)
val () = res := list_cons (f "div", res)
val () = res := list_cons (f "mod", res)
val () = res := list_cons (atext_newline(), res)
//
val () = res := list_cons (f "lt", res)
val () = res := list_cons (f "lte", res)
val () = res := list_cons (f "gt", res)
val () = res := list_cons (f "gte", res)
val () = res := list_cons (f "eq", res)
val () = res := list_cons (f "neq", res)
val () = res := list_cons (f "compare", res)
val () = res := list_cons (atext_newline(), res)
//
val () = res := list_cons (f "max", res)
val () = res := list_cons (f "min", res)
//
val res = list_reverse (res)
//
in
  atext_concatxt (list_of_list_vt (res))
end // end of [g0float_implist]
%}
#atscode_separator()

implement
g0int2float<intknd,fltknd> = g0int2float_int_float
implement
g0int2float<intknd,dblknd> = g0int2float_int_double
implement
g0int2float<lintknd,dblknd> = g0int2float_lint_double

#atscode_separator()

implement
g0float2int<fltknd, intknd> = g0float2int_float_int
implement
g0float2int<fltknd, lintknd> = g0float2int_float_lint
implement
g0float2int<dblknd, intknd> = g0float2int_double_int
implement
g0float2int<dblknd, lintknd> = g0float2int_double_lint
implement
g0float2int<dblknd, llintknd> = g0float2int_double_llint

#atscode_separator()

implement
g0float2float<fltknd,fltknd> = g0float2float_float_float
implement
g0float2float<fltknd,dblknd> = g0float2float_float_double
implement
g0float2float<dblknd,fltknd> = g0float2float_double_float
implement
g0float2float<dblknd,dblknd> = g0float2float_double_double

#atscode_separator()

implement g0string2float<dblknd> = g0string2float_double

#atscode_separator()

#g0float_implist("fltknd", "float")\

#atscode_separator()

#g0float_implist("dblknd", "double")\

#atscode_separator()

#g0float_implist("ldblknd", "ldouble")\

#atscode_separator()
//
implement fprint_val<float> = fprint_float
implement fprint_val<double> = fprint_double
implement fprint_val<ldouble> = fprint_ldouble
//
#atscode_separator()

implement
{tk}(*tk*)
g0float_npow
  (x, n) = let
//
typedef gfloat = g0float(tk)
//
fun
loop
(
  x: gfloat, res: gfloat, n: int
) : gfloat = (
//
if
(n > 1)
then let
  val n2 = n >> 1
  val b0 = n - (n2 << 1)
  val xx = x * x
in
  if b0 = 0
    then loop(xx, res, n2) else loop(xx, x * res, n2)
  // end of [if]
end // end of [then]
else (
  if n > 0 then x * res else res
) (* end of [else] *)
//
) (* end of [loop] *)
//
val res = $UN.cast{gfloat}(1.0)
//
in
  $effmask_all(loop(x, res, n))
end // end of [g0float_npow]

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement
main (argc, argv) =
  fprint_filsub (stdout_ref, "float_atxt.txt")
%}\
