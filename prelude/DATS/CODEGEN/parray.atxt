%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"parray.dats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_GPL()

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/DATS/CODEGEN/parray.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_authoremail("hwxi AT cs DOT bu DOT edu")
#atscode_start_time("April, 2012")

#atscode_separator()

staload UN = "prelude/SATS/unsafe.sats"

#atscode_separator()

implement{a}
parray_is_empty
  {l}{n} (pf | p) = let
//
prval () =
  lemma_parray_v_params (pf)
//
val x = $UN.ptr0_get<ptr> (p)
val [lx:addr] x = g1ofg0_ptr (x)
//
prval () =
__assert () where {
  extern praxi __assert (): [(lx <= null && n == 0) || (lx > null && n > 0)] void
} (* end of [prval] *)
//
in
  lte_ptr1_ptr1 (x, the_null_ptr)
end // end of [parray_is_empty]

implement{a}
parray_isnot_empty
  {l}{n} (pf | p) = let
//
prval () =
  lemma_parray_v_params (pf)
//
val x = $UN.ptr0_get<ptr> (p)
val [lx:addr] x = g1ofg0_ptr (x)
//
prval () =
__assert () where {
  extern praxi __assert (): [(lx <= null && n == 0) || (lx > null && n > 0)] void
} (* end of [prval] *)
//
in
  gt_ptr1_ptr1 (x, the_null_ptr)
end // end of [parray_isnot_empty]

#atscode_separator()

implement
{a}(*tmp*)
parray_size
  (pf | p) = let
//
prval () = lemma_parray_v_params (pf)
//
fun
loop
{l:addr}
{i,j:nat} .<i>.
(
  pf: !parray_v (a, l, i) | p: ptr l, j: size_t j
) :<> size_t (i+j) = let
  val isnot = parray_isnot_empty<a> (pf | p)
in
  if isnot
    then let
      prval parray_v_cons(pf1, pf2) = pf
      val asz = loop (pf2 | ptr_succ<a> (p), j+1)
      prval () = pf := parray_v_cons{a}(pf1, pf2)
    in
      asz
    end // end of [then]
    else (j) // end of [else]
  // end if [if]
end (* end of [loop] *)
//
in
  loop (pf | p, i2sz(0))
end // end of [parray_size]

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement
main (argc, argv) =
  fprint_filsub (stdout_ref, "parray_atxt.txt")
%}\
