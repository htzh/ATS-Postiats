%{
//
#define
ATSCODEFORMAT "txt"
//
#if(ATSCODEFORMAT == "txt")
//
#include
"utils/atsdoc/HATS/postiatsatxt.hats"
//
#endif // end of [ATSCCODEFORMAT]
//
val
_thisfilename = atext_strcst"string.cats"
val ((*void*)) =
theAtextMap_insert_str("thisfilename", _thisfilename)
%}\
\
#atscode_banner_for_C()
#atscode_copyright_GPL_for_C()

#atscode_separator_for_C()

/*
#atscode_author("Hongwei Xi")
#atscode_authoremail("gmhwxiATgmailDOTcom")
#atscode_start_time("April, 2012")
*/

#atscode_separator_for_C()

/*
** Source:
** $PATSHOME/prelude/CATS/CODEGEN/string.atxt
** Time of generation: #timestamp()
*/

#atscode_separator_for_C()

\#ifndef ATSLIB_PRELUDE_CATS_STRING
\#define ATSLIB_PRELUDE_CATS_STRING

#atscode_separator_for_C()
//
// [string.h]
//
extern
size_t strlen (const char *str) ;
extern
int // (sign)
strcmp (const char *x1, const char *x2) ;
//
extern
char *strchr(const char *str1, int c2) ;
extern
char *strrchr(const char *str1, int c2) ;
extern
char *strstr(const char *str1, const char *str2) ;
//
extern
size_t strspn(const char *str1, const char *acc2) ;
extern
size_t strcspn(const char *str1, const char *rej2) ;
//
\#ifndef memcpy
extern
void *memcpy(void *dest, const void *src, size_t n) ;
\#endif // \#ifndef
//
#atscode_separator_for_C()

\#define atspre_stropt_none() atsptr_null

#atscode_separator_for_C()

ATSinline()
atstype_bool
atspre_lt_string_string
(
  atstype_string x1, atstype_string x2
) {
  int sgn = strcmp((char*)x1, (char*)x2) ;
  return (sgn < 0 ? atsbool_true : atsbool_false) ;
} // [atspre_lt_string_string]

ATSinline()
atstype_bool
atspre_lte_string_string
(
  atstype_string x1, atstype_string x2
) {
  int sgn = strcmp((char*)x1, (char*)x2) ;
  return (sgn <= 0 ? atsbool_true : atsbool_false) ;
} // [atspre_lte_string_string]

ATSinline()
atstype_bool
atspre_gt_string_string
(
  atstype_string x1, atstype_string x2
) {
  int sgn = strcmp((char*)x1, (char*)x2) ;
  return (sgn > 0 ? atsbool_true : atsbool_false) ;
} // [atspre_gt_string_string]

ATSinline()
atstype_bool
atspre_gte_string_string
(
  atstype_string x1, atstype_string x2
) {
  int sgn = strcmp((char*)x1, (char*)x2) ;
  return (sgn >= 0 ? atsbool_true : atsbool_false) ;
} // [atspre_gte_string_string]

ATSinline()
atstype_bool
atspre_eq_string_string
(
  atstype_string x1, atstype_string x2
) {
  int sgn = strcmp((char*)x1, (char*)x2) ;
  return (sgn == 0 ? atsbool_true : atsbool_false) ;
} // [atspre_eq_string_string]

ATSinline()
atstype_bool
atspre_neq_string_string
(
  atstype_string x1, atstype_string x2
) {
  int sgn = strcmp((char*)x1, (char*)x2) ;
  return (sgn != 0 ? atsbool_true : atsbool_false) ;
} // [atspre_neq_string_string]

#atscode_separator_for_C()

\#define atspre_string_equal atspre_eq_string_string
\#define atspre_string_noteq atspre_neq_string_string

#atscode_separator_for_C()

ATSinline()
atstype_int
atspre_compare_string_string
(
  atstype_string x1, atstype_string x2
) {
  return atspre_int2sgn(strcmp((char*)x1, (char*)x2)) ;
} // [atspre_compare_string_string]

#atscode_separator_for_C()

\#define atspre_strcmp strcmp
\#define atspre_strlen strlen
\#define atspre_strchr strchr
\#define atspre_strrchr strrchr
\#define atspre_strstr strstr
\#define atspre_strspn strspn
\#define atspre_strcspn strcspn

\#define atspre_string_memcpy memcpy

#atscode_separator_for_C()
//
// HX-2013-09: declared in [stdio.h]
//
\#ifndef snprintf
extern
int snprintf (char *str, size_t size, const char *format, ...) ;
\#endif // end of [ifndef]
//
#atscode_separator_for_C()
//
ATSinline()
atstype_string
atspre_g0int2string_int
  (atstype_int x)
{
  size_t n0 ;
  char *res ;
  size_t ntot ;
  n0 = 4 ;
  res = ATS_MALLOC(n0) ;
  ntot = snprintf(res, n0, "%i", x) ;
  if (ntot >= n0)
  {
    ATS_MFREE(res) ;
    res = (char*)ATS_MALLOC(ntot+1) ;
    ntot = snprintf(res, ntot+1, "%i", x) ;
  }
  return res ;
}
//
ATSinline()
atstype_string
atspre_g0int2string_lint
  (atstype_lint x)
{
  size_t n0 ;
  char *res ;
  size_t ntot ;
  n0 = 4 ;
  res = ATS_MALLOC(n0) ;
  ntot = snprintf(res, n0, "%li", x) ;
  if (ntot >= n0)
  {
    ATS_MFREE(res) ;
    res = (char*)ATS_MALLOC(ntot+1) ;
    ntot = snprintf(res, ntot+1, "%li", x) ;
  }
  return res ;
}
//
ATSinline()
atstype_string
atspre_g0int2string_llint
  (atstype_llint x)
{
  size_t n0 ;
  char *res ;
  size_t ntot ;
  n0 = 8 ;
  res = ATS_MALLOC(n0) ;
  ntot = snprintf(res, n0, "%lli", x) ;
  if (ntot >= n0)
  {
    ATS_MFREE(res) ;
    res = (char*)ATS_MALLOC(ntot+1) ;
    ntot = snprintf(res, ntot+1, "%lli", x) ;
  }
  return res ;
}
//
#atscode_separator_for_C()
//
\#include <stdarg.h>
//
// HX-2013-11:
// these are implemented in [string.dats]
//
extern
atstype_string // Strptr0
atspre_string_make_snprintf(atstype_string fmt, ...) ;
extern
atstype_string // Strptr0
atspre_string_make_vsnprintf
  (atstype_size bsz0, atstype_string fmt, va_list ap0) ;
//
#atscode_separator_for_C()

\#endif // ifndef ATSLIB_PRELUDE_CATS_STRING

#atscode_separator_for_C()

#atscode_eof_strsub_for_C("\#thisfilename$")\

%{
implement
main (argc, argv) = fprint_filsub (stdout_ref, "string_atxt.txt")
%}\
