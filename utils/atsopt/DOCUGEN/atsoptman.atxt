%{
(*
** Author: Hongwei Xi
** Authoremail: gmhwxi AT gmail DOT com
** Start Time: July, 2013
*)
%}

%{
//
dynload "libatsdoc/dynloadall.dats"
//
#include "utils/atsdoc/HATS/xhtmlatxt.hats"
//
%}

%{
macdef para (x) = xmltagging ("p", ,(x)) // paragraph
macdef command (x) = xmltagging ("strong", ,(x)) // boldfaced
macdef iemph (x) = xmltagging ("i", ,(x)) // underlining
macdef uemph (x) = xmltagging ("u", ,(x)) // underlining
%}

#atext_strcst('\
<!DOCTYPE html \
PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" \
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title></title>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
</head>
')#comment("textcopy")

<body>

#H1("atsopt")

<hr size=2 align=left></hr>

#comment(" ****** ****** ")

#para("\

The command #command("atsopt") directly invokes the ATS-compiler for
typechecking ATS (source) code and then compiling it into C (target)
code. Sometimes, the name of the command is choosen to be #command("patsopt").

")

#comment(" ****** ****** ")

#H2("Environment Variables")

<menu>

<li>
#uemph("ATSHOME"):
This variable stores the path to the directory where the ATS programming
language system is installed. It must be set properly in order for
#command("atsopt") to function correctly.

<li>
#uemph("ATSHOMERELOC"):
This variable stores the current version of ATS. It is no longer needed in
ATS2 (ATS/Postiats).

</menu>

#comment(" ****** ****** ")

#H2("Option-controlling Flags")

<menu>
<li>
#uemph("-v"): It is a shorthand for #uemph("--version").
<li>
#uemph("--version"):
It is for printing out the version of #command("atsopt").

<li>
#uemph("-cc"): It is a shorthand for #uemph("--compile").
<li>
#uemph("--compile"):
This flag indicates that a call to the ATS-compiler is to perform
typechecking and then translate ATS (source) code into C (target) code
(after typechecking passes).  This option is turned on by default.

<li>
#uemph("-tc"): It is a shorthand for #uemph("--typecheck").
<li>
#uemph("--typeckeck"):
This flag indicates that a call to the ATS-compiler is only required
to perform typechecking and it should not attempt to translate ATS
(source) code into C (target) code.

<li>
#uemph("--gline"):
This flag indicates that line pragma information is to be generated
in the C (target) code.

<li>
#uemph("--debug"):
This flag indicates to the ATS-compiler the need for reporting more
informative error messages.
<li>
#uemph("--debug2"):
This flag indicates to the ATS-compiler the need for reporting even more
informative error messages.

<li>
#uemph("-dep"): It is a shorthand for #uemph("--depgen").
<li>
#uemph("--depgen"):
This flag indicates that a call to the ATS-compiler is for generateing
file-dependency information, which is often needed for contructing a Makefile.

<li>
#uemph("-tag"): It is a shorthand for #uemph("--taggen").
<li>
#uemph("--taggen"):
This flag indicates that a call to the ATS-compiler is for generateing
syntax-tagging information, which can then be used to generate ctags for
vim and etags for emacs.

<li>
#uemph("--DATS"):
This flag indicates that the next argument, which should be name or
name/value pair (separated by the symbol =), is to be passed as a toplevel
definition for the ATS-compiler.

<li>
#uemph("--IATS"):
This flag indicates that the next argument is to be passed as an
include-path for the ATS-compiler.

<li>
#uemph("-o"): It is a shorthand for #uemph("--output").
<li>
#uemph("--output"):
This flag is interpreted as #uemph("--output-w") by default.  If it follows
#uemph("--output-a"), then it is interpreted as #uemph("--output-a").  If
it follows #uemph("--output-w"), then it is interpreted as #uemph("--output-w").

<li>
#uemph("--output-a"):
This flag indicates that (1) the next argument is interpreted as the name
of a file for storing the output generated by a subseqent call to the
ATS-compiler and (2) the file is to be opened with the mode "a" (appending).
<li>
#uemph("--output-w"):
This flag indicates that (1) the next argument is interpreted as the name
of a file for storing the output generated by a subseqent call to the
ATS-compiler and (2) the file is to be opened with the mode "w" (overwriting).

<li>
#uemph("-s"): It is a shorthand for #uemph("--static").
<li>
#uemph("--static"):
This flag indicates that the next argument is interpreted as the name of
a file containing static ATS code. Usually, this file name ends with the
extension #uemph(".sats").

<li>
#uemph("-d"): It is a shorthand for #uemph("--dynamic").
<li>
#uemph("--dynamic"):
This flag indicates that the next argument is interpreted as the name of
a file containing dynamic ATS code. Usually, this file name ends with the
extension #uemph(".dats").

<li>
#uemph("--pkgreloc"):
This flag indicates that a call to the ATS-compiler is for generateing a
script (in JSON) that can be passed to the command #command("atspkgreloc")
to perform relocation of remotely located files referenced in the processed
ATS source code.

<li>
#uemph("--tlcalopt-disable"):
This flag indicates to the ATS-compiler that tail-call optimization
(that turns a recursive tail-call into a local jump) is to be suspended.
For instance, the flag should be used for compiling ATS to Erlang as the
latter does its own tail-call optimization.

<li>
#uemph("--constraint-export"):
This flag indicates to the ATS-compiler that the constraints generated
during typechecking should be exported (in JSON format).
<li>
#uemph("--constraint-ignored"):
This flag indicates to the ATS-compiler that the constraints generated
during typechecking should be entirely ignored. For instance, doing so
can be justified if constraint-solving is performed externally.

</menu>

#comment(" ****** ****** ")

<hr size=2 align=left></hr>

#comment(" end of [atsoptman.atxt] ")

</body>
</html>

%{
implement main () = fprint_filsub (stdout_ref, "atsoptman_atxt.txt")
%}
